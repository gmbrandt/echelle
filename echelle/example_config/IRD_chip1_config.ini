[data]
# The data class to use for the data. The class must implement all of the methods of echelle.images.DataProduct
data_class = echelle.images.Image
# the extension number or name in the .fits file where the raw data for the exposure lies. Typically 0
# for non-compressed files, and 1 for .fits.fz files.
primary_data_extension = 0
# elements that must be contained in the filenames of the files to reduce. E.g. ['.fits', '20190405']
files_contain = ['.fits']
# the fits header keys which gives various information about the data frame.
# instrument2 is just another specifier for the instrument. If not needed, set it to the same as 'instrument'
header_keys = {'type': 'DATA-TYP',
               'gain': 'GAIN',
               # Z clock speed is 10. The read noise is 12 e- for IRD, so I picked
               # a header key which is close to 12. TODO fix this.
               'read_noise': 'Z_CLK',
               # hack for fiber state OBS-MOD is always SPEC
               'fiber_state': 'OBS-MOD',
               'observation_date': 'DATE-OBS',
               'instrument': 'TELESCOP',
               'instrument2': 'DET-ID',
               'site_name': 'INSTRUME',
              # unique_id should give some kind of running tag for each raw frame, per reduction batch.
              # E.g. 1 or 14 or 52 etc..
               'unique_id': 'FRAMEID'}
# the corresponding possible entries of 'type' and which ones correspond to wavecal and lampflat.
# format as a python dict.
type_keys = {'OBJECT': 'wavecal',
             'DOMEFLAT': 'lampflat',
             'SPEC': 'thar&thar&none'}

[stages]
# Reduction stages for a wavelength calibration frame, in order.
wavecal = [
          #'echelle.basic.OverscanSubtractor',
          'echelle.basic.GainNormalizer',
          #'echelle.basic.Trimmer',
          'echelle.munge.Rot90',
          'echelle.munge.FlipHoriz',
          'echelle.variance.CalcInverseVariance',
          #'echelle.basic.BackgroundSubtract',
          'echelle.traces.LoadTrace',
          'echelle.extract.RectifyTwodSpectrum',
          'echelle.extract.BoxExtract',
          'echelle.blaze.ApplyBlaze',
          'echelle.extract.RectifyTwodSpectrum',
          'echelle.extract.BlazeCorrectedExtract',
          'echelle.basic.BackgroundSubtractSpectrum',
          'echelle.fibers.MakeFiberTemplate',
          'echelle.fibers.IdentifyFibers',
          'echelle.wavelength.Initialize',
          'echelle.wavelength.AddWavelengthColumn',
          'echelle.wavelength.LoadReferenceLineList',
          'echelle.wavelength.IdentifyArcEmissionLinesLowSN',
          'echelle.wavelength.BlazeCorrectArcEmissionLines',
          'echelle.wavelength.FitOverlaps',
          'echelle.wavelength.IdentifyArcEmissionLines',
          #'echelle.wavelength.IdentifyPrincipleOrderNumber',
          'echelle.wavelength.SolveFromOverlaps',
          'echelle.wavelength.FindGlobalScale',
          'echelle.wavelength.SolutionRefineInitial',
          'echelle.wavelength.SolutionRefineFinal',
          'echelle.wavelength.IdentifyArcEmissionLinesLowSN',
          'echelle.wavelength.ApplyToSpectrum',
          'echelle.wavelength.TabulateArcEmissionLines']

# reduction stages for lampflat file types, in order.
lampflat = [
            #'echelle.basic.OverscanSubtractor',
            'echelle.basic.GainNormalizer',
            #'echelle.basic.Trimmer',
            'echelle.munge.Rot90',
            'echelle.munge.FlipHoriz',
            'echelle.variance.CalcInverseVariance',
            'echelle.basic.BackgroundSubtract',
            'echelle.traces.TraceMaker',
            'echelle.blaze.BlazeMaker']

[reduction]
# path to the reference line list
line_list_path = "/home/gmbrandt/Documents/echelle/echelle/data/NIST_air_IRlines.txt"
# database which records processed images, calibration images etc.
database_path = "/home/gmbrandt/Downloads/IRD_caldata/pipeline.db"
# time format for 'observation_date' in the fits headers. Must comply with datetime.datetime.strftime etc..
# For NRES below, a timestamp in 'DATE-OBS' looks like '2019-04-10T12:56:44.466'. Use %% in place of %.
time_format = "%%Y-%%m-%%d"

# function which will parse the region keyword for overscan and data regions. Note this can come from any package.
parse_region_keyword = 'echelle.utils.instrument_specific.parse_nres_region_keyword'

# settings for each reduction stage

# Trace settings #
trace_fit_initial_degree_two_guess = -20
trace_fit_polynomial_order = 2
trace_table_name = "TRACE"
# pixel window down the center of the detector to look for traces.
window_for_trace_identification = {'max': 950, 'min': 830}
# minimum pixel spacing between two adjacent diffraction orders or fibers on the detector.
min_fiber_to_fiber_spacing = 8
min_snr_for_trace_identification = 10
# Blaze settings.
# extension name for .fits file where the blaze data is stored.
blaze_name = "BLAZE"
# the name of signal-to-noise weighted extracted spectrum that has been blaze corrected.
blaze_corrected_spectrum_name = "BLZCORR"
# the minimum signal-to-noise on a lampflat to consider as a valid pixel for blaze correction
min_blaze_sn = 3

# Extraction settings #
# half windows are in pixels.
max_extraction_half_window = 12

box_extraction_half_window = 8
sne_extraction_half_window = 8
box_spectrum_name = "SPECBOX"
sne_spectrum_name = "SPECSNE"

# order identification settings #
# reference id of the central diffraction order in the database arc template.
ref_id = 9
# trace id of the diffraction order to use to create an arc template (only necessary if using MakeFiberTemplate)
template_trace_id = 18
# Wavelength calibration settings #
overlap_table_name = "OVERLAP"
# the min signal to noise for an emission peak to be used to fit the overlaps.
overlap_min_peak_snr = 15

emission_lines_table_name = "LINES"
max_red_overlap = 1000
max_blue_overlap = 1000
global_scale_range = (0.5, 2)
overlap_linear_scale_range = (0.5, 2)
approx_detector_range_angstroms = 1800
approx_num_orders = 45
# principle order number (m0) settings for the IdentifyPrincipleOrderNumber stage
# start (inclusive), stop (exclusive)
m0_range = (113, 119)
principle_order_number = 116
# the minimum number of overlaps which must be fit for the wavelength solution to proceed.
min_num_overlaps = 5
# the min signal to noise for an emission peak to be considered in the wavelength solution.
min_peak_snr = 20

# initial model that is constrained via the overlaps and is used to find the global scale:
# format is: {xpower: [ipower, ipower,...],..}
# e.g. {1: [0, 1, 2]} represents (1/(m0+i)) * (a*x * (b + c*i + d*i^2)). The 1/(m0+i) prefactor is always included.
initial_wavelength_model = {1: [0, 1, 2],
                            2: [0, 1, 2]}
# wavelength model for the initial refine stage:
intermediate_wavelength_model = {0: [0, 1, 2],
                                 1: [0, 1, 2],
                                 2: [0, 1, 2]}
# wavelength model that the final refine stage will end at (stage begins with the intermediate model):
final_wavelength_model = {0: [0, 1, 2, 3, 4, 5],
                          1: [0, 1, 2, 3, 4, 5],
                          2: [0, 1, 2, 3, 4, 5],
                          3: [0, 1, 2, 3, 4, 5],
                          4: [0]}
